===== src/pages/LoginPage.tsx =====
import React, {useState} from "react";
import axios from "axios";
import api from "../api/api";
import {useNavigate} from "react-router-dom";
import {useAuth} from "../context/AuthContext";

function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errorMsg, setErrorMsg] = useState("");
  const [loading, setLoading] = useState(false);
  const navigate = useNavigate();
  const authContext = useAuth();

  const handleLogin = async (event: { preventDefault: () => void; }) => {
    event.preventDefault();
    setLoading(true);

    try {
      const response = await api.post("/login", {
        email,
        password,
      });

      const {accessToken, refreshToken, expiresAt, user} = response.data.data;

      localStorage.setItem("accessToken", accessToken);
      localStorage.setItem("refreshToken", refreshToken);
      localStorage.setItem("expiresAt", expiresAt);

      console.log("Inicio de sesión exitoso para el usuario:", user);

      authContext.setUser(user);
      authContext.setAuthenticated(true);

      navigate("/tts");
    } catch (error) {
      if (axios.isAxiosError(error)) {
        setErrorMsg(error.response?.data?.message || "Error al iniciar sesión");
      } else {
        setErrorMsg("Error desconocido");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{maxWidth: 400, margin: "0 auto"}}>
      <h1>Iniciar Sesión</h1>
      <form onSubmit={handleLogin}>
        <div>
          <label>Email</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <div>
          <label>Contraseña</label>
          <input
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            required
          />
        </div>

        {errorMsg && (
          <div style={{color: "red", marginTop: 8}}>{errorMsg}</div>
        )}

        <button type="submit" disabled={loading}>
          {loading ? "Cargando..." : "Ingresar"}
        </button>
      </form>
    </div>
  );
}

export default LoginPage;



===== src/pages/MyProposalsPage.tsx =====
import React from "react";

const MyProposalsPage: React.FC = () => {
  // Static data for now, replace with API integration later
  const proposals = [
    { id: 1, title: "Proposal 1", description: "Description for proposal 1" },
    { id: 2, title: "Proposal 2", description: "Description for proposal 2" },
    { id: 3, title: "Proposal 3", description: "Description for proposal 3" },
  ];

  return (
    <div>
      <h1>My Proposals</h1>
      <ul>
        {proposals.map((proposal) => (
          <li key={proposal.id}>
            <h2>{proposal.title}</h2>
            <p>{proposal.description}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default MyProposalsPage;



===== src/pages/SignupPage.tsx =====
import React, {useState} from "react";
import {useNavigate} from "react-router-dom";
import api from "../api/api";

function SignupPage() {
    const [nombreCompleto, setNombreCompleto] = useState("");
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState<string>('');
    const [isLoading, setIsLoading] = useState(false);
    const navigate = useNavigate();

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        setIsLoading(true);

        const userData = {
            nombreCompleto,
            email,
            password,
        };

        try {
            await api.post("/users", userData);
            alert("Usuario creado con éxito. Se te ha enviado un correo de confirmación, por favor revisa tu bandeja de entrada.");
            navigate("/login");
        } catch (err: any) {
            if (err.response?.status === 409) {
                alert("El email ya está en uso");
            } else {
                alert("Error al guardar el Usuario");
            }
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <div>
            <h2>Registro de Usuario</h2>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>Nombre Completo:</label>
                    <input
                        type="text"
                        value={nombreCompleto}
                        onChange={(e) => setNombreCompleto(e.target.value)}
                        required
                    />
                </div>

                <div>
                    <label>Email:</label>
                    <input
                        type="email"
                        value={email}
                        onChange={(e) => setEmail(e.target.value)}
                        required
                    />
                </div>

                <div>
                    <label>Contraseña:</label>
                    <input
                        type="password"
                        value={password}
                        onChange={(e) => setPassword(e.target.value)}
                        required
                    />
                </div>

                <button type="submit" disabled={isLoading}>
                    {isLoading ? "Cargando..." : "¡Regístrame!"}
                </button>
            </form>
        </div>
    );
}

export default SignupPage;



===== src/pages/UserPage.tsx =====
import React from "react";
import UserList from "../components/User/UserList";
import UserForm from "../components/User/UserForm";
import { Routes, Route } from "react-router-dom";

const UserPage: React.FC = () => {
  return (
    <div>
      <h1>Gestión de Usuarios</h1>
      <Routes>
        <Route path="/" element={<UserList />} />
        <Route path="/create" element={<UserForm />} />
        <Route path="/edit/:userId" element={<UserForm />} />
      </Routes>
    </div>
  );
};

export default UserPage;



===== src/pages/TTPage.tsx =====
import React from "react";
import TTList from "../components/TT/TTList";
import TTForm from "../components/TT/TTForm";
import { Routes, Route } from "react-router-dom";

const TTPage: React.FC = () => {
  return (
    <div>
      <h1>Gestión de Trabajos de Titulación</h1>
      <Routes>
        <Route path="/" element={<TTList />} />
        <Route path="/create" element={<TTForm />} />
        <Route path="/edit/:ttId" element={<TTForm />} />
      </Routes>
    </div>
  );
};

export default TTPage;



===== src/api/api.ts =====
import axios from "axios";

export const api = axios.create({
  baseURL: "http://localhost:4000/api/v1",
  headers: {
    "Content-Type": "application/json",
  },
});

// Interceptor para añadir el token JWT a las solicitudes
api.interceptors.request.use(
  (config) => {
    const expiresAt: string | null = localStorage.getItem("expiresAt");

    if (expiresAt && new Date(expiresAt) < new Date()) {
      const refreshToken: string | null = localStorage.getItem("refreshToken");
      if (refreshToken) {
        api.post("/refresh-token", { refreshToken }).then((response) => {
          const { accessToken, refreshToken, expiresAt } = response.data.data;
          localStorage.setItem("accessToken", accessToken);
          localStorage.setItem("refreshToken", refreshToken);
          localStorage.setItem("expiresAt", expiresAt);
        });
      } else {
        localStorage.removeItem("accessToken");
        localStorage.removeItem("refreshToken");
        localStorage.removeItem("expiresAt");
      }
    }

    const token = localStorage.getItem("accessToken");
    if (token) {
      config.headers["Authorization"] = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default api;



===== src/react-app-env.d.ts =====
/// <reference types="react-scripts" />



===== src/context/AuthContext.tsx =====
import React, {
  createContext,
  useState,
  useContext,
  ReactNode, useEffect,
} from "react";
import {User} from "../types/User";
import api from "../api/api";

// Definimos qué expone nuestro contexto
interface AuthContextProps {
  isAuthenticated: boolean;
  setAuthenticated: (value: boolean) => void;
  user: User;
  setUser: (user: User) => void;
}

// Creamos el contexto con defaults "vacíos"
const AuthContext = createContext<AuthContextProps>({
  isAuthenticated: false,
  setAuthenticated: () => {
  },
  user: {
    _id: "",
    nombreCompleto: "Visitante",
    email: "",
    roles: ["visitor"],
    fechaRegistro: new Date().toISOString(),
  },
  setUser: () => {
  },
});

export const AuthProvider: React.FC<{ children: ReactNode }> = ({children,}) => {
  const [isAuthenticated, setAuthenticated] = useState(false);
  const [user, setUser] = useState<User>({
    _id: "",
    nombreCompleto: "Visitante",
    email: "",
    roles: ["visitor"],
    fechaRegistro: new Date().toISOString(),
  });

  useEffect(() => {
    const fetchUserSession = async () => {
      try {
        const accessToken: string | null = localStorage.getItem('accessToken');
        const refreshToken: string | null = localStorage.getItem('refreshToken');
        const expiresAt: string | null = localStorage.getItem('expiresAt');

        if (!accessToken || !refreshToken || !expiresAt) {
          return;
        }

        const response = await api.post('/login-with-token', {
          accessToken: accessToken,
          refreshToken: refreshToken,
          expiresAt: expiresAt,
        });

        console.log("Response:", response);

        if (response.data) {
          const {accessToken, refreshToken, expiresAt, user} = response.data.data;

          setAuthenticated(true);
          setUser(user);

          console.log("User session restored:", user, expiresAt, accessToken, refreshToken);

          localStorage.setItem('accessToken', accessToken);
          localStorage.setItem('refreshToken', refreshToken);
          localStorage.setItem('expiresAt', expiresAt);
        }
      } catch (error) {
        console.error("Error fetching user session:", error);
      }
    };

    fetchUserSession();
  }, []);

  return (
    <AuthContext.Provider
      value={{
        isAuthenticated,
        setAuthenticated,
        user,
        setUser
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => useContext(AuthContext);



===== src/types/TTSingleResponse.ts =====
import { TT } from "./TT";

export interface TTSingleResponse {
  message: string;
  data: TT;
}



===== src/types/TTListResponse.ts =====
import { TT } from "./TT";

export interface TTListResponse {
  message: string;
  data: {
    total: number;
    page: number;
    limit: number;
    data: TT[];
  };
}



===== src/types/TT.ts =====
export interface Autor {
  nombreCompleto: string;
  orcid?: string;
  _id?: string;
}

export interface Director {
  nombreCompleto: string;
  orcid?: string;
  _id?: string;
}

export interface TT {
  _id: string;
  titulo: string;
  autores: Autor[];
  palabrasClave: string[];
  unidadAcademica: string;
  directores: Director[];
  grado: string;
  resumen: string;
  documentoUrl: string;
  filename?: string;
  fechaPublicacion?: string; // ISO String
  __v?: number;
}



===== src/types/User.ts =====
export type Role = "visitor" | "user" | "gestor";

export interface User {
  _id: string;
  nombreCompleto: string;
  email: string;
  roles: Role[];
  fechaRegistro: string; // ISO String
  ultimoLogin?: string; // ISO String
}



===== src/components/Navbar.tsx =====
import React from "react";
import {Link} from "react-router-dom";
import {useAuth} from "../context/AuthContext";

const Navbar: React.FC = () => {
  const {user} = useAuth();

  return (
    <nav>
      <ul>
        <li>
          <Link to="/tts">TTs</Link>
        </li>
        {!user.roles.includes("visitor") && (
          <li>
            <Link to="/my-proposals">Mis Propuestas</Link>
          </li>
        )}
        {!user.roles.includes("visitor") && (
          <li>
            <Link to="/tts/create">Proponer TT</Link>
          </li>
        )}
      </ul>
    </nav>
  );
};

export default Navbar;



===== src/components/ProtectedRoute.tsx =====
import React from "react";
import {Navigate} from "react-router-dom";

const ProtectedRoute: React.FC<{ children: React.ReactNode }> = ({children}) => {
  const {isAuthenticated, isLoading} = {isAuthenticated: true, isLoading: false};

  // Mostrar un indicador de carga mientras Auth0 verifica el estado del usuario
  if (isLoading) {
    return <div>Cargando...</div>;
  }

  // Si el usuario no está autenticado, redirigir al login
  if (!isAuthenticated) {
    console.log("No autenticado");
    return <Navigate to="/login"/>;
  }

  // Si está autenticado, renderizar el contenido protegido
  return <>{children}</>;
};

export default ProtectedRoute;



===== src/components/User/UserList.tsx =====
import React, { useEffect, useState } from "react";
import { User } from "../../types/User";
import axios from "axios";
import { Link } from "react-router-dom";

const UserList: React.FC = () => {
  const [users, setUsers] = useState<User[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchUsers = async () => {
      try {
        const response = await axios.get<User[]>(
          "http://localhost:4000/api/v1/users"
        );
        setUsers(response.data);
        setLoading(false);
      } catch (err: any) {
        setError(err.message);
        setLoading(false);
      }
    };

    fetchUsers();
  }, []);

  const handleDelete = async (id: string) => {
    if (window.confirm("¿Estás seguro de eliminar este Usuario?")) {
      try {
        await axios.delete(`http://localhost:4000/api/v1/users/${id}`);
        setUsers(users.filter((user) => user._id !== id));
      } catch (err: any) {
        alert("Error al eliminar el Usuario");
      }
    }
  };

  if (loading) return <div>Cargando...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h2>Lista de Usuarios</h2>
      <Link to="/users/create">Crear Nuevo Usuario</Link>
      <table border={1} cellPadding={10} cellSpacing={0}>
        <thead>
          <tr>
            <th>Nombre Completo</th>
            <th>Email</th>
            <th>Roles</th>
            <th>Fecha de Registro</th>
            <th>Último Login</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {users.map((user) => (
            <tr key={user._id}>
              <td>{user.nombreCompleto}</td>
              <td>{user.email}</td>
              <td>{user.roles.join(", ")}</td>
              <td>{new Date(user.fechaRegistro).toLocaleDateString()}</td>
              <td>
                {user.ultimoLogin
                  ? new Date(user.ultimoLogin).toLocaleDateString()
                  : "Nunca"}
              </td>
              <td>
                <Link to={`/users/edit/${user._id}`}>Editar</Link> |{" "}
                <button onClick={() => handleDelete(user._id)}>Eliminar</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default UserList;



===== src/components/User/UserForm.tsx =====
import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import {Role, User} from "../../types/User";
import api from "../../api/api";

const UserForm: React.FC = () => {
  const [nombreCompleto, setNombreCompleto] = useState("");
  const [email, setEmail] = useState("");
  const [roles, setRoles] = useState<Role[]>(["user"]);
  const navigate = useNavigate();
  const { userId } = useParams<{ userId: string }>();

  useEffect(() => {
    if (userId) {
      // Editar Usuario: Obtener datos existentes
      const fetchUser = async () => {
        try {
          const response = await api.get<User>(
            `/users/${userId}`
          );
          const user = response.data;
          setNombreCompleto(user.nombreCompleto);
          setEmail(user.email);
          setRoles(user.roles);
        } catch (err: any) {
          alert("Error al obtener el Usuario");
        }
      };

      void fetchUser();
    }
  }, [userId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const userData: Partial<User> = {
      nombreCompleto,
      email,
      roles,
    };

    try {
      if (userId) {
        // Actualizar Usuario
        await axios.put(
          `http://localhost:4000/api/v1/users/${userId}`,
          userData
        );
        alert("Usuario actualizado con éxito");
      } else {
        // Crear Usuario
        await axios.post("http://localhost:4000/api/v1/users", userData);
        alert("Usuario creado con éxito");
      }
      navigate("/users");
    } catch (err: any) {
      alert("Error al guardar el Usuario");
    }
  };

  return (
    <div>
      <h2>{userId ? "Editar" : "Crear"} Usuario</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Nombre Completo:</label>
          <input
            type="text"
            value={nombreCompleto}
            onChange={(e) => setNombreCompleto(e.target.value)}
            required
          />
        </div>

        <div>
          <label>Email:</label>
          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            required
          />
        </div>

        <button type="submit">{userId ? "Actualizar" : "Crear"} Usuario</button>
      </form>
    </div>
  );
};

export default UserForm;



===== src/components/TT/TTSearchBar.tsx =====
import React, { useState } from "react";

interface TTSearchProps {
  onSearch: (filters: any) => void;
}

const TTSearchBar: React.FC<TTSearchProps> = ({ onSearch }) => {
  const [titulo, setTitulo] = useState("");
  const [autor, setAutor] = useState("");
  const [unidadAcademica, setUnidadAcademica] = useState("");
  const [grado, setGrado] = useState("");
  const [palabraClave, setPalabraClave] = useState("");
  const [anoPublicacion, setAnoPublicacion] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const filters: any = {};
    if (titulo) filters.titulo = titulo;
    if (autor) filters.autor = autor;
    if (unidadAcademica) filters.unidadAcademica = unidadAcademica;
    if (grado) filters.grado = grado;
    if (palabraClave) filters.palabrasClave = [palabraClave];
    if (anoPublicacion) filters.anoPublicacion = Number(anoPublicacion);

    onSearch(filters);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        placeholder="Título"
        value={titulo}
        onChange={(e) => setTitulo(e.target.value)}
      />
      <input
        type="text"
        placeholder="Autor"
        value={autor}
        onChange={(e) => setAutor(e.target.value)}
      />
      <input
        type="text"
        placeholder="Unidad Académica"
        value={unidadAcademica}
        onChange={(e) => setUnidadAcademica(e.target.value)}
      />
      <input
        type="text"
        placeholder="Grado"
        value={grado}
        onChange={(e) => setGrado(e.target.value)}
      />
      <input
        type="text"
        placeholder="Palabra Clave"
        value={palabraClave}
        onChange={(e) => setPalabraClave(e.target.value)}
      />
      <input
        type="number"
        placeholder="Año de Publicación"
        value={anoPublicacion}
        onChange={(e) => setAnoPublicacion(e.target.value)}
      />
      <button type="submit">Buscar</button>
      <br />
      <br />
    </form>
  );
};

export default TTSearchBar;



===== src/components/TT/TTForm.tsx =====
// src/components/TT/TTForm.tsx

import React, { useState, useEffect, FormEvent } from "react";
import { useNavigate, useParams } from "react-router-dom";
import api from "../../api/api"; // Axios config
import { Autor, Director } from "../../types/TT";
import { TTSingleResponse } from "../../types/TTSingleResponse";

const TTForm: React.FC = () => {
  const { ttId } = useParams<{ ttId: string }>();
  const navigate = useNavigate();

  // Definición de estados con tipos explícitos
  const [titulo, setTitulo] = useState<string>("");
  const [autores, setAutores] = useState<Autor[]>([
    { nombreCompleto: "", orcid: "" },
  ]);
  const [palabrasClave, setPalabrasClave] = useState<string[]>([""]);
  const [unidadAcademica, setUnidadAcademica] = useState<string>("");
  const [directores, setDirectores] = useState<Director[]>([
    { nombreCompleto: "", orcid: "" },
  ]);
  const [grado, setGrado] = useState<string>("");
  const [resumen, setResumen] = useState<string>("");
  const [file, setFile] = useState<File | null>(null); // PDF
  const [fechaPublicacion, setFechaPublicacion] = useState<string>("");

  // Cargar Datos si es Edición
  useEffect(() => {
    if (ttId) {
      const fetchTT = async () => {
        try {
          const response = await api.get<TTSingleResponse>(`/tts/${ttId}`);
          const tt = response.data.data; // Asumiendo que la respuesta es { message, data: TT }

          setTitulo(tt.titulo || "");

          if (tt.autores && Array.isArray(tt.autores)) {
            setAutores(
              tt.autores.map((a) => ({
                nombreCompleto: a.nombreCompleto || "",
                orcid: a.orcid || "",
              }))
            );
          }

          if (tt.palabrasClave && Array.isArray(tt.palabrasClave)) {
            setPalabrasClave(tt.palabrasClave);
          }

          setUnidadAcademica(tt.unidadAcademica || "");

          if (tt.directores && Array.isArray(tt.directores)) {
            setDirectores(
              tt.directores.map((d) => ({
                nombreCompleto: d.nombreCompleto || "",
                orcid: d.orcid || "",
              }))
            );
          }

          setGrado(tt.grado || "");
          setResumen(tt.resumen || "");

          if (tt.fechaPublicacion) {
            setFechaPublicacion(tt.fechaPublicacion.substring(0, 10));
          }
        } catch (error) {
          console.error("Error al obtener el TT:", error);
          alert("Error al obtener el TT");
        }
      };
      fetchTT();
    }
  }, [ttId]);

  // Manejo de Autores
  const handleAutorChange = (
    index: number,
    field: keyof Autor,
    value: string
  ) => {
    const newAutores = [...autores];
    newAutores[index][field] = value;
    setAutores(newAutores);
  };
  const addAutor = () => {
    setAutores([...autores, { nombreCompleto: "", orcid: "" }]);
  };
  const removeAutor = (index: number) => {
    const newAutores = [...autores];
    newAutores.splice(index, 1);
    setAutores(newAutores);
  };

  // Manejo de Directores
  const handleDirectorChange = (
    index: number,
    field: keyof Director,
    value: string
  ) => {
    const newDirectores = [...directores];
    newDirectores[index][field] = value;
    setDirectores(newDirectores);
  };
  const addDirector = () => {
    setDirectores([...directores, { nombreCompleto: "", orcid: "" }]);
  };
  const removeDirector = (index: number) => {
    const newDirectores = [...directores];
    newDirectores.splice(index, 1);
    setDirectores(newDirectores);
  };

  // Manejo de Palabras Clave
  const handlePalabraClaveChange = (index: number, value: string) => {
    const newPC = [...palabrasClave];
    newPC[index] = value;
    setPalabrasClave(newPC);
  };
  const addPalabraClave = () => {
    setPalabrasClave([...palabrasClave, ""]);
  };
  const removePalabraClave = (index: number) => {
    const newPC = [...palabrasClave];
    newPC.splice(index, 1);
    setPalabrasClave(newPC);
  };

  // Manejar la subida de archivo
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setFile(e.target.files[0]);
    }
  };

  // Enviar el formulario en `form-data`
  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();

    // Crear `FormData`
    const formData = new FormData();

    // Subida de archivo PDF
    if (file) formData.append("file", file);

    // Los campos simples, como título, grado, resumen
    formData.append("titulo", titulo);
    formData.append("unidadAcademica", unidadAcademica);
    formData.append("grado", grado);
    formData.append("resumen", resumen);

    // Convertimos a JSON las estructuras complejas
    formData.append("autores", JSON.stringify(autores));
    formData.append("directores", JSON.stringify(directores));
    formData.append("palabrasClave", JSON.stringify(palabrasClave));

    if (fechaPublicacion) {
      formData.append("fechaPublicacion", fechaPublicacion);
    }

    // Depuración: Ver qué se está enviando
    formData.forEach((value, key) => {
      console.log(`${key}: ${value}`);
    });

    try {
      if (ttId) {
        // Actualizar TT
        // convertir a JSON formData
        const jsonData = {
          titulo,
          unidadAcademica,
          grado,
          resumen,
          autores,
          directores,
          palabrasClave,
          fechaPublicacion,
        };

        await api.put(`/tts/${ttId}`, jsonData, {
          headers: { "Content-Type": "application/json" },
        });

        // await api.put(`/tts/${ttId}`, formData);

        alert("TT actualizado con éxito");
      } else {
        // Crear TT
        await api.post("/tts", formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });
        alert("TT creado con éxito");
      }
      navigate("/tts");
    } catch (err) {
      console.error("Error al guardar el TT:", err);
      alert("Error al guardar el TT");
    }
  };

  return (
    <div>
      <h2>{ttId ? "Editar" : "Crear"} Trabajo de Titulación</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Título:</label>
          <input
            type="text"
            value={titulo}
            onChange={(e) => setTitulo(e.target.value)}
            required
          />
        </div>

        {/* Autores */}
        <div>
          <label>Autores:</label>
          {autores.map((autor, index) => (
            <div key={index}>
              <input
                type="text"
                placeholder="Nombre Completo"
                value={autor.nombreCompleto}
                onChange={(e) =>
                  handleAutorChange(index, "nombreCompleto", e.target.value)
                }
                required
              />
              <input
                type="text"
                placeholder="ORCID (Opcional)"
                value={autor.orcid}
                onChange={(e) =>
                  handleAutorChange(index, "orcid", e.target.value)
                }
              />
              {autores.length > 1 && (
                <button type="button" onClick={() => removeAutor(index)}>
                  Eliminar
                </button>
              )}
            </div>
          ))}
          <button type="button" onClick={addAutor}>
            + Autor
          </button>
        </div>

        {/* Palabras Clave */}
        <div>
          <label>Palabras Clave:</label>
          {palabrasClave.map((pc, idx) => (
            <div key={idx}>
              <input
                type="text"
                value={pc}
                onChange={(e) => handlePalabraClaveChange(idx, e.target.value)}
                required={idx === 0}
              />
              {palabrasClave.length > 1 && (
                <button type="button" onClick={() => removePalabraClave(idx)}>
                  Eliminar
                </button>
              )}
            </div>
          ))}
          <button type="button" onClick={addPalabraClave}>
            + Palabra Clave
          </button>
        </div>

        <div>
          <label>Unidad Académica:</label>
          <input
            type="text"
            value={unidadAcademica}
            onChange={(e) => setUnidadAcademica(e.target.value)}
            required
          />
        </div>

        {/* Directores */}
        <div>
          <label>Directores:</label>
          {directores.map((director, index) => (
            <div key={index}>
              <input
                type="text"
                placeholder="Nombre Completo"
                value={director.nombreCompleto}
                onChange={(e) =>
                  handleDirectorChange(index, "nombreCompleto", e.target.value)
                }
                required
              />
              <input
                type="text"
                placeholder="ORCID (Opcional)"
                value={director.orcid}
                onChange={(e) =>
                  handleDirectorChange(index, "orcid", e.target.value)
                }
              />
              {directores.length > 1 && (
                <button type="button" onClick={() => removeDirector(index)}>
                  Eliminar
                </button>
              )}
            </div>
          ))}
          <button type="button" onClick={addDirector}>
            + Director
          </button>
        </div>

        <div>
          <label>Grado:</label>
          <input
            type="text"
            value={grado}
            onChange={(e) => setGrado(e.target.value)}
            required
          />
        </div>

        <div>
          <label>Resumen:</label>
          <textarea
            value={resumen}
            onChange={(e) => setResumen(e.target.value)}
            required
          />
        </div>

        {/* Subida de PDF */}
        <div>
          <label>Archivo PDF del TT:</label>
          <input
            type="file"
            accept="application/pdf"
            onChange={handleFileChange}
          />
        </div>

        {/* Fecha de Publicación (opcional) */}
        <div>
          <label>Fecha de Publicación:</label>
          <input
            type="date"
            value={fechaPublicacion}
            onChange={(e) => setFechaPublicacion(e.target.value)}
          />
        </div>

        <button type="submit">{ttId ? "Actualizar" : "Crear"} TT</button>
      </form>
    </div>
  );
};

export default TTForm;



===== src/components/TT/TTList.tsx =====
// src/components/TT/TTList.tsx
import React, { useEffect, useState } from "react";
import TTSearchBar from "./TTSearchBar";
import api from "../../api/api";
import { TT } from "../../types/TT";
import { Link } from "react-router-dom";
import { TTListResponse } from "../../types/TTListResponse";

const TTList: React.FC = () => {
  const [tts, setTts] = useState<TT[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  const [page, setPage] = useState<number>(1);
  const [limit, setLimit] = useState<number>(10);
  const [total, setTotal] = useState<number>(0);

  useEffect(() => {
    fetchTTs();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [page, limit]);

  const fetchTTs = async (filters?: any) => {
    setLoading(true);
    setError(null);
    try {
      const params = {
        page,
        limit,
        ...filters,
      };
      const response = await api.get<TTListResponse>("/tts", { params });
      if (response.data && response.data.data) {
        setTts(response.data.data.data);
        setTotal(response.data.data.total);
        console.log("Respuesta de la API:", response.data);
      } else {
        setError("Estructura de respuesta no esperada");
      }
    } catch (err: any) {
      setError(err.message);
    }
    setLoading(false);
  };

  const handleSearch = (filters: any) => {
    setPage(1); // Reiniciar a la primera página al buscar
    fetchTTs(filters);
  };

  const handleDelete = async (id: string) => {
    if (window.confirm("¿Estás seguro de eliminar este TT?")) {
      try {
        await api.delete(`/tts/${id}`);
        setTts(tts.filter((tt) => tt._id !== id));
      } catch (err: any) {
        alert("Error al eliminar el TT");
        console.error("Error al eliminar TT:", err);
      }
    }
  };

  const handleDownload = async (ttId: string) => {
    try {
      const res = await api.get(`/tts/${ttId}/download`);
      // res.data.downloadUrl => la URL firmada
      window.open(res.data.downloadUrl, "_blank");
    } catch (error) {
      console.error("Error al descargar:", error);
      alert("Error al descargar el PDF");
    }
  };

  const handleLimitChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setLimit(Number(e.target.value));
    setPage(1); // Reiniciar a la primera página al cambiar el límite
  };

  const totalPages = Math.ceil(total / limit);

  const handlePrevPage = () => {
    if (page > 1) setPage(page - 1);
  };

  const handleNextPage = () => {
    if (page < totalPages) setPage(page + 1);
  };

  if (loading) return <div>Cargando...</div>;
  if (error) return <div>Error: {error}</div>;

  return (
    <div>
      <h2>Repositorio de TT</h2>
      <TTSearchBar onSearch={handleSearch} />

      <div style={{ margin: "10px 0" }}>
        <label>Resultados por página: </label>
        <select value={limit} onChange={handleLimitChange}>
          <option value={5}>5</option>
          <option value={10}>10</option>
          <option value={20}>20</option>
        </select>
      </div>

      <table border={1} cellPadding={10} cellSpacing={0}>
        <thead>
          <tr>
            <th>Título</th>
            <th>Autores</th>
            <th>Palabras Clave</th>
            <th>Unidad Académica</th>
            <th>Directores</th>
            <th>Grado</th>
            <th>Acciones</th>
          </tr>
        </thead>
        <tbody>
          {tts.map((tt) => (
            <tr key={tt._id}>
              <td>{tt.titulo}</td>
              <td>{tt.autores.map((a) => a.nombreCompleto).join(", ")}</td>
              <td>{tt.palabrasClave.join(", ")}</td>
              <td>{tt.unidadAcademica}</td>
              <td>{tt.directores.map((d) => d.nombreCompleto).join(", ")}</td>
              <td>{tt.grado}</td>
              <td>
                <Link to={`/tts/edit/${tt._id}`}>Editar</Link> |{" "}
                <button onClick={() => handleDelete(tt._id)}>Eliminar</button> |{" "}
                <button onClick={() => handleDownload(tt._id)}>
                  Descargar PDF
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Controles de Paginación */}
      <div style={{ marginTop: "20px" }}>
        <button onClick={handlePrevPage} disabled={page <= 1}>
          Anterior
        </button>
        <span style={{ margin: "0 10px" }}>
          Página {page} de {totalPages}
        </span>
        <button onClick={handleNextPage} disabled={page >= totalPages}>
          Siguiente
        </button>
      </div>
    </div>
  );
};

export default TTList;




===== src/index.tsx =====
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import {AuthProvider} from "./context/AuthContext";

const root = ReactDOM.createRoot(document.getElementById("root")!);
root.render(
  <AuthProvider>
    <App/>
  </AuthProvider>
);



===== src/App.tsx =====
// src/App.tsx
import React from "react";
import {
    BrowserRouter as Router,
    Routes,
    Route,
    Navigate,
} from "react-router-dom";
import Navbar from "./components/Navbar";
import TTPage from "./pages/TTPage";
import MyProposalsPage from "./pages/MyProposalsPage";
import LoginPage from "./pages/LoginPage";
import {useAuth} from "./context/AuthContext";
import SignupPage from "./pages/SignupPage";

const App: React.FC = () => {
    const {user} = useAuth();

    return (
        <Router>
            <Navbar/>
            <Routes>
                {/* Ruta base: redirige a /tts */}
                <Route path="/" element={<Navigate to="/tts"/>}/>

                {/* TTPage visible para todos */}
                <Route path="/tts/*" element={<TTPage/>}/>

                {/* MyProposalsPage solo si NO eres "visitor" */}
                {!user.roles.includes("visitor") && (
                    <Route path="/my-proposals" element={<MyProposalsPage/>}/>
                )}

                {/* Pantalla de Login */}
                <Route path="/login" element={<LoginPage/>}/>

                {/* Pantalla de Registro */}
                {<Route path="/signup" element={<SignupPage/>}/>}

                {/* 404 */}
                <Route path="*" element={<div>404 Not Found</div>}/>
            </Routes>
        </Router>
    );
};

export default App;



